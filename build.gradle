apply plugin: "com.github.ben-manes.versions"
apply plugin: "io.github.gradle-nexus.publish-plugin"

buildscript {
    apply from: "versions.gradle"

    repositories {
        gradlePluginPortal()
        google()
        mavenCentral()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:$versions.plugins.android"
        classpath "io.github.gradle-nexus:publish-plugin:$versions.plugins.nexusPublish"
        classpath "com.github.ben-manes:gradle-versions-plugin:$versions.plugins.versions"
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }

    tasks.withType(Javadoc) {
        options.addStringOption("Xdoclint:none", "-quiet")
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

def localProperties = new Properties()
localProperties.load(rootProject.file("local.properties").newDataInputStream())

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username = localProperties.getProperty("sonatypeUsername")
            password = localProperties.getProperty("sonatypePassword")
            stagingProfileId = localProperties.getProperty("sonatypeStagingProfileId")
        }
    }
}

dependencyUpdates.revision = "release"
dependencyUpdates.gradleReleaseChannel = "current"

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { selection ->
            boolean rejected = ["alpha", "beta", "rc", "cr", "m", "eap"].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            boolean robolectricRejected = false
            if (!rejected) {
                if (selection.candidate.group == "org.robolectric") {
                    if (!selection.candidate.version.startsWith("4.7.")) {
                        robolectricRejected = true
                    }
                }
            }
            if (rejected) {
                selection.reject("Beta version")
            } else if (robolectricRejected) {
                selection.reject("Robolectric min SDK 14 required version")
            }
        }
    }
}
